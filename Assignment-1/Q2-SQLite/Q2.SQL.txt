-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies(
	id integer,name text,score integer);

CREATE TABLE movie_cast(
	movie_id integer,cast_id integer,cast_name text);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import "./movie-name-score.txt" movies
.import "./movie-cast.txt" movie_cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]



SELECT ((COUNT(*)*100.0)/(SELECT COUNT(*) FROM movies)) as prop FROM movies WHERE score>50;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

SELECT * FROM movies ORDER BY score DESC, name ASC LIMIT 7;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]


SELECT cast_id, cast_name, COUNT(*) AS movie_count FROM movie_cast GROUP BY cast_id ORDER BY COUNT(*) DESC LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]



SELECT cast_id, cast_name, AVG(score)*1.0 AS average_score FROM movie_cast INNER JOIN movies ON movies.id=movie_cast.movie_id GROUP BY cast_name HAVING AVG(score)>50 AND COUNT(movie_id)>2 ORDER BY AVG(score) DESC ;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS
SELECT DISTINCT a1.cast_id AS cast_member_id1,a2.cast_id AS cast_member_id2,COUNT(a1.movie_id) AS movie_count,AVG(m.score)AS average_movie_score FROM movie_cast 
AS a1 INNER JOIN movie_cast AS a2 ON a1.movie_id=a2.movie_id
INNER JOIN movies AS m ON a1.movie_id=m.id
GROUP BY a1.cast_id,a2.cast_id HAVING a1.cast_name!=a2.cast_name AND a1.cast_name<a2.cast_name AND COUNT(a1.movie_id)>=3 ORDER BY a1.cast_name ASC;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT * FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id,cast_name,AVG(good_collaboration.average_movie_score)*1.00 AS collaboration_score FROM movie_cast INNER JOIN good_collaboration ON cast_id=cast_member_id1 OR movie_cast.cast_id=cast_member_id2 GROUP BY movie_cast.cast_id ORDER BY AVG(average_movie_score) DESC;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts4(id integer,name text,year integer,overview text,popularity decimal);

.import "./movie-overview.txt" movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS count_overview FROM movie_overview WHERE overview MATCH "FIGHT";


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --